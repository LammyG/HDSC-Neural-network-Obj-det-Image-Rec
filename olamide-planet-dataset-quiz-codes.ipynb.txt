{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2022-03-22T22:12:26.346587Z","iopub.execute_input":"2022-03-22T22:12:26.347044Z","iopub.status.idle":"2022-03-22T22:12:26.362443Z","shell.execute_reply.started":"2022-03-22T22:12:26.347008Z","shell.execute_reply":"2022-03-22T22:12:26.361560Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"!pip install pathlib","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:12:35.865747Z","iopub.execute_input":"2022-03-22T22:12:35.866641Z","iopub.status.idle":"2022-03-22T22:12:45.321583Z","shell.execute_reply.started":"2022-03-22T22:12:35.866593Z","shell.execute_reply":"2022-03-22T22:12:45.320567Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"print(os.listdir(\"../input/planet-dataset-m\"))\nprint(os.listdir(\"../input/planet-datasetm\"))\n","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:12:48.036547Z","iopub.execute_input":"2022-03-22T22:12:48.037185Z","iopub.status.idle":"2022-03-22T22:12:48.044953Z","shell.execute_reply.started":"2022-03-22T22:12:48.037143Z","shell.execute_reply":"2022-03-22T22:12:48.044074Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"#training data\ndf_train = pd.read_csv('../input/planet-dataset-m/train_v2.csv')\nprint('Training data shape: ', df_train.shape)\ndf_train.head()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:13:49.316168Z","iopub.execute_input":"2022-03-22T22:13:49.316440Z","iopub.status.idle":"2022-03-22T22:13:49.371976Z","shell.execute_reply.started":"2022-03-22T22:13:49.316412Z","shell.execute_reply":"2022-03-22T22:13:49.370644Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"# Testing data features\nimport numpy as np\nimport pandas as pd\ndf_test = pd.read_csv('../input/planet-datasetm/test_v2_file_mapping.csv')\nprint('Testing data shape: ', df_test.shape)\ndf_test.head()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:14:09.637106Z","iopub.execute_input":"2022-03-22T22:14:09.637787Z","iopub.status.idle":"2022-03-22T22:14:09.684764Z","shell.execute_reply.started":"2022-03-22T22:14:09.637744Z","shell.execute_reply":"2022-03-22T22:14:09.683705Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"df_train.info(verbose=True, show_counts=True)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:14:14.856511Z","iopub.execute_input":"2022-03-22T22:14:14.856844Z","iopub.status.idle":"2022-03-22T22:14:14.882851Z","shell.execute_reply.started":"2022-03-22T22:14:14.856810Z","shell.execute_reply":"2022-03-22T22:14:14.882055Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"# Number of each type of column\ndf_train.dtypes.value_counts()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:14:20.036801Z","iopub.execute_input":"2022-03-22T22:14:20.037219Z","iopub.status.idle":"2022-03-22T22:14:20.046500Z","shell.execute_reply.started":"2022-03-22T22:14:20.037181Z","shell.execute_reply":"2022-03-22T22:14:20.045386Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"# Number of unique classes in each object column\ndf_train.select_dtypes('object').apply(pd.Series.nunique, axis = 0)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:14:24.077181Z","iopub.execute_input":"2022-03-22T22:14:24.077467Z","iopub.status.idle":"2022-03-22T22:14:24.107335Z","shell.execute_reply.started":"2022-03-22T22:14:24.077438Z","shell.execute_reply":"2022-03-22T22:14:24.106320Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"pd.set_option('display.max_rows', 500)\nimport gc\n\n# sklearn preprocessing \nfrom sklearn.metrics import confusion_matrix, roc_auc_score ,roc_curve,auc\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import classification_report\n\nimport lightgbm as lgb\n\n\n#eda\n!pip install klib\nimport klib\n\n# Suppress warnings \nimport warnings\nwarnings.filterwarnings('ignore')\n\n# matplotlib and seaborn for plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nseed = 2357\nnp.random.seed(seed)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:14:28.477754Z","iopub.execute_input":"2022-03-22T22:14:28.478056Z","iopub.status.idle":"2022-03-22T22:14:38.118579Z","shell.execute_reply.started":"2022-03-22T22:14:28.478022Z","shell.execute_reply":"2022-03-22T22:14:38.117374Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"df_cleaned_train = klib.data_cleaning(df_train)\nklib.missingval_plot(df_cleaned_train)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:15:05.401661Z","iopub.execute_input":"2022-03-22T22:15:05.402014Z","iopub.status.idle":"2022-03-22T22:15:05.651830Z","shell.execute_reply.started":"2022-03-22T22:15:05.401970Z","shell.execute_reply":"2022-03-22T22:15:05.650853Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"#Preprocessing data\n# combine train and test together to do common feature engineering\n\ntrain_copy = df_train.copy()\ntest_copy = df_test.copy()\n\n# set up a flag field to distinguish records from training and testing sets in the combined dataset\ntrain_copy['source'] = 0\ntest_copy['source'] = 1\n\n\nall_data = pd.concat([train_copy, test_copy], axis=0, copy=True)\ndel train_copy\ndel test_copy\ngc.collect()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:15:52.572123Z","iopub.execute_input":"2022-03-22T22:15:52.572428Z","iopub.status.idle":"2022-03-22T22:15:52.763048Z","shell.execute_reply.started":"2022-03-22T22:15:52.572398Z","shell.execute_reply":"2022-03-22T22:15:52.761997Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"categorical_columns = all_data.select_dtypes('object').columns\ncategorical_columns","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:16:08.586200Z","iopub.execute_input":"2022-03-22T22:16:08.587372Z","iopub.status.idle":"2022-03-22T22:16:08.608348Z","shell.execute_reply.started":"2022-03-22T22:16:08.587330Z","shell.execute_reply":"2022-03-22T22:16:08.607667Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"objList = all_data.select_dtypes(include = \"object\").columns\nprint (objList)\n\n\n# Create a label encoder object\nle = LabelEncoder()\nfor feat in objList:\n    all_data[feat] = le.fit_transform(all_data[feat].astype(str))\n\nprint (all_data.info())","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:16:13.661683Z","iopub.execute_input":"2022-03-22T22:16:13.662537Z","iopub.status.idle":"2022-03-22T22:16:14.027494Z","shell.execute_reply.started":"2022-03-22T22:16:13.662497Z","shell.execute_reply":"2022-03-22T22:16:14.025297Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"all_data[categorical_columns].head()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:16:26.983454Z","iopub.execute_input":"2022-03-22T22:16:26.984464Z","iopub.status.idle":"2022-03-22T22:16:26.998453Z","shell.execute_reply.started":"2022-03-22T22:16:26.984421Z","shell.execute_reply":"2022-03-22T22:16:26.997419Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"# split the all-data DF into training and testing again\ntraining = all_data[all_data['source']==0]\ntesting = all_data[all_data['source']==1]\n\ndel all_data\ngc.collect()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:16:37.743553Z","iopub.execute_input":"2022-03-22T22:16:37.743916Z","iopub.status.idle":"2022-03-22T22:16:37.900370Z","shell.execute_reply.started":"2022-03-22T22:16:37.743866Z","shell.execute_reply":"2022-03-22T22:16:37.898964Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"print(training.shape)\nprint(testing.shape)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:16:44.561144Z","iopub.execute_input":"2022-03-22T22:16:44.561430Z","iopub.status.idle":"2022-03-22T22:16:44.566092Z","shell.execute_reply.started":"2022-03-22T22:16:44.561402Z","shell.execute_reply":"2022-03-22T22:16:44.565529Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"#BASELINE\n#Logistic Regression\n\nTARGET = 'image_name'\ntrain_labels = training[TARGET]\ntrain = training.drop(columns = [TARGET,'source'])\nfeatures = list(train.columns)\ntest = testing.drop(columns = ['source'])\nprint('Training data shape: ', train.shape)\nprint('Testing data shape: ', test.shape)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:16:52.303509Z","iopub.execute_input":"2022-03-22T22:16:52.304102Z","iopub.status.idle":"2022-03-22T22:16:52.317004Z","shell.execute_reply.started":"2022-03-22T22:16:52.304045Z","shell.execute_reply":"2022-03-22T22:16:52.315987Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"for col in training.columns:\n    col_type = training[col].dtype\n\n    if col_type != object:\n        c_min = training[col].min()\n        c_max = training[col].max()\n        if str(col_type)[:3] == 'int':\n            if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                training[col] = training[col].astype(np.int8)\n            elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                training[col] = training[col].astype(np.int16)\n            elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                training[col] = training[col].astype(np.int32)\n            elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                training[col] = training[col].astype(np.int64)  \n        else:\n            if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                training[col] = training[col].astype(np.float16)\n            elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                training[col] = training[col].astype(np.float32)\n            else:\n                training[col] = training[col].astype(np.float64)\n    else:\n        training[col] = training[col].astype('category')\n        \nstart_mem = training.memory_usage().sum() / 1024**2\nend_mem = training.memory_usage().sum() / 1024**2\nprint('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\nprint('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) / start_mem))\n\nreturn(training)\n        \n        ","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:16:58.164423Z","iopub.execute_input":"2022-03-22T22:16:58.164970Z","iopub.status.idle":"2022-03-22T22:16:58.205423Z","shell.execute_reply.started":"2022-03-22T22:16:58.164931Z","shell.execute_reply":"2022-03-22T22:16:58.203957Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:17:10.521857Z","iopub.execute_input":"2022-03-22T22:17:10.522398Z","iopub.status.idle":"2022-03-22T22:17:10.526318Z","shell.execute_reply.started":"2022-03-22T22:17:10.522360Z","shell.execute_reply":"2022-03-22T22:17:10.525380Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"# Make the model with the specified regularization parameter\nlog_reg = LogisticRegression(C = 0.1)\n\n# Train on the training data\nlog_reg.fit(train, train_labels)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T20:50:53.226013Z","iopub.execute_input":"2022-03-22T20:50:53.226358Z","iopub.status.idle":"2022-03-22T20:50:53.304433Z","shell.execute_reply.started":"2022-03-22T20:50:53.22627Z","shell.execute_reply":"2022-03-22T20:50:53.303244Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Make the random forest classifier\nrf = RandomForestClassifier(n_estimators = 100, random_state = 50, verbose = 1)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:24:56.838996Z","iopub.execute_input":"2022-03-22T22:24:56.839280Z","iopub.status.idle":"2022-03-22T22:24:56.844082Z","shell.execute_reply.started":"2022-03-22T22:24:56.839252Z","shell.execute_reply":"2022-03-22T22:24:56.842955Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"df_train.to_csv('df_train.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:25:00.998678Z","iopub.execute_input":"2022-03-22T22:25:00.999162Z","iopub.status.idle":"2022-03-22T22:25:01.132430Z","shell.execute_reply.started":"2022-03-22T22:25:00.999130Z","shell.execute_reply":"2022-03-22T22:25:01.131189Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"df_test.to_csv('df_test.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T22:26:32.158429Z","iopub.execute_input":"2022-03-22T22:26:32.158788Z","iopub.status.idle":"2022-03-22T22:26:32.217847Z","shell.execute_reply.started":"2022-03-22T22:26:32.158752Z","shell.execute_reply":"2022-03-22T22:26:32.217168Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"# Make the model with the specified regularization parameter\nfrom sklearn.linear_model import LogisticRegression\nlog_reg = LogisticRegression(C = 0.1)\n\n# Train on the training data\nlog_reg.fit(train, train_labels)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T20:45:44.664197Z","iopub.execute_input":"2022-03-22T20:45:44.665093Z"},"jupyter":{"source_hidden":true},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Make predictions\n# Make sure to select the second column only\nlog_reg_pred = log_reg.predict_proba(test)[:, 1]","metadata":{"execution":{"iopub.status.busy":"2022-03-22T20:42:14.018781Z","iopub.execute_input":"2022-03-22T20:42:14.019069Z","iopub.status.idle":"2022-03-22T20:42:14.040352Z","shell.execute_reply.started":"2022-03-22T20:42:14.01904Z","shell.execute_reply":"2022-03-22T20:42:14.038862Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from pathlib import Path\nimport numpy as np\nimport pandas as pd\ndata_path = Path(\"'../input/planet-dataset-m/train_v2.csv\")\ntest_base = pd.read_csv(\n    data_path /''../input/planet-dataset-m/train_v2.csv'')\nsub = pd.read_csv(\n    data_path / '../input/planet-dataset-m/train_v2.csv')\n\nsub.assign(\n    latDeg = test_base.latDeg,\n    lngDeg = test_base.lngDeg\n).to_csv(\n    'submission.csv', index=False\n)\n","metadata":{"execution":{"iopub.status.busy":"2022-03-22T15:23:33.296484Z","iopub.execute_input":"2022-03-22T15:23:33.296803Z","iopub.status.idle":"2022-03-22T15:23:33.303787Z","shell.execute_reply.started":"2022-03-22T15:23:33.296773Z","shell.execute_reply":"2022-03-22T15:23:33.302897Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}